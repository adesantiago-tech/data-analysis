name: Tests

on:
  push:
    branches: [ main, master ]  # Agregué master aquí
  pull_request:
    branches: [ main, master ]  # Y aquí también

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
        command: server /data

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio

      - name: Wait for services
        run: |
          # Wait for Redis
          timeout 30 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' localhost 6379
          # Wait for MinIO
          timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=term-missing

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v -m integration

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v -m e2e

      - name: Run all tests with coverage requirement
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install linting tools
        run: |
          pip install black isort flake8 mypy

      - name: Check code formatting with Black
        run: |
          black --check app/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only app/ tests/

      - name: Lint with flake8
        run: |
          flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Type check with mypy
        run: |
          mypy app/ --ignore-missing-imports