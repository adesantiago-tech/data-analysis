name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio

      - name: Run all tests with coverage requirement
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json || echo "Bandit found issues"

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || echo "Safety found issues"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          pip install black isort flake8

      - name: Check code formatting with Black
        run: |
          black --check app/ tests/ || echo "Black formatting issues found"

      - name: Check import sorting with isort
        run: |
          isort --check-only app/ tests/ || echo "Import sorting issues found"

      - name: Lint with flake8
        run: |
          flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Flake8 issues found"